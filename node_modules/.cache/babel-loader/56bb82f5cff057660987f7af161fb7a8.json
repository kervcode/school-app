{"ast":null,"code":"import config from './config';\nexport default class Data {\n  api(path, method = 'GET', body = null, requireAuth = false, credentials = null) {\n    const url = config.apiBaseUrl + path;\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    };\n\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n\n    if (requireAuth) {\n      const encodedCredentials = btoa(\"\".concat(credentials.emailAddress, \":\").concat(credentials.password));\n      options.headers['Authorization'] = \"Basic \".concat(encodedCredentials);\n    }\n\n    return fetch(url, options);\n  }\n\n  async getUser(emailAddress, password) {\n    const response = await this.api(\"/users\", 'GET', null, true, {\n      emailAddress,\n      password\n    });\n\n    if (response.status === 200) {\n      return response.json().then(data => {\n        //  console.log(\"data\", data)\n        return data;\n      });\n    } else if (response.status === 401) {\n      return null;\n    } else {\n      throw new Error();\n    }\n  }\n\n  async createUser(user) {\n    const response = await this.api('/users', 'POST', user);\n\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n\n  async updateCourse(course, id, emailAddress, password) {\n    const response = await this.api(\"/courses/\".concat(id), 'PUT', course, true, {\n      emailAddress,\n      password\n    });\n\n    if (response.status === 204) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n\n  async createCourse(course, emailAddress, password) {\n    const response = await this.api('/courses', 'POST', course, true, {\n      emailAddress,\n      password\n    });\n\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n\n  async deleteCourse(course, id, emailAddress, password) {\n    const response = await this.api(\"/courses/\".concat(id), \"DELETE\", course, true, {\n      emailAddress,\n      password\n    });\n\n    if (response.status === 204) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/kervintznoel/Documents/GitHub/school-app-fend/src/Data.js"],"names":["config","Data","api","path","method","body","requireAuth","credentials","url","apiBaseUrl","options","headers","JSON","stringify","encodedCredentials","btoa","emailAddress","password","fetch","getUser","response","status","json","then","data","Error","createUser","user","updateCourse","course","id","createCourse","deleteCourse"],"mappings":"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","sourcesContent":["import config from './config';\n\nexport default class Data {\n  api(path, method = 'GET', body = null, requireAuth = false, credentials = null) {\n    const url = config.apiBaseUrl + path;\n  \n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n      },\n    };\n\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n\n    if(requireAuth) {\n      const encodedCredentials = btoa(`${credentials.emailAddress}:${credentials.password}`);\n      \n      options.headers['Authorization'] = `Basic ${encodedCredentials}`;\n    }\n    \n    return fetch(url, options);\n  }\n\n  async getUser(emailAddress, password) {\n    const response = await this.api(`/users`, 'GET', null, true, { emailAddress, password });\n    \n    if (response.status === 200) {\n      return response.json().then(data => {\n        //  console.log(\"data\", data)\n         return data\n      });\n    }\n    else if (response.status === 401) {\n      return null;\n    }\n    else {\n      throw new Error();\n    }\n  }\n  \n  async createUser(user) {\n    const response = await this.api('/users', 'POST', user);\n    if (response.status === 201) {\n      return [];\n    }\n    else if (response.status === 400) {\n      return response.json().then(data => {\n        return data;\n      });\n    }\n    else {\n      throw new Error();\n    }\n  }\n  \n   async updateCourse(course, id, emailAddress, password) {\n    const response = await this.api(`/courses/${id}`, 'PUT', course, true, {\n      emailAddress, password\n    });\n    \n    if (response.status === 204) {\n      return [];\n    }\n    else if (response.status === 400) {\n      return response.json().then(data => {\n        return data;\n      });\n    }\n    else {\n      throw new Error();\n    }\n  }\n  \n  async createCourse(course, emailAddress, password) {\n    const response = await this.api('/courses', 'POST', course, true, {\n      emailAddress, password\n    });\n    \n    if (response.status === 201) {\n      return [];\n    }\n    else if (response.status === 400) {\n      return response.json().then(data => {\n        return data;\n      });\n    }\n    else {\n      throw new Error();\n    }\n  }\n\n\n  async deleteCourse(course, id, emailAddress, password) {\n    const response = await this.api(`/courses/${id}`, \"DELETE\", course, true, { emailAddress, password});\n    \n    if (response.status === 204) {\n      return [];\n    }\n    else if (response.status === 400) {\n      return response.json().then(data => {\n        return data;\n      });\n    }\n    else {\n      throw new Error();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}